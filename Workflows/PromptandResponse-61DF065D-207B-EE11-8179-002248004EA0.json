{
  "properties": {
    "connectionReferences": {
      "shared_commondataserviceforapps": {
        "runtimeSource": "embedded",
        "connection": {
          "connectionReferenceLogicalName": "ans_sharedcommondataserviceforapps_74c65"
        },
        "api": {
          "name": "shared_commondataserviceforapps"
        }
      },
      "shared_openaigpt4ip_1": {
        "runtimeSource": "embedded",
        "connection": {
          "connectionReferenceLogicalName": "ans_sharedopenaigpt4ip_3d2b6"
        },
        "api": {
          "name": "shared_openaigpt4ip"
        }
      }
    },
    "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "contentVersion": "1.0.0.0",
      "parameters": {
        "$connections": {
          "defaultValue": {},
          "type": "Object"
        },
        "$authentication": {
          "defaultValue": {},
          "type": "SecureObject"
        }
      },
      "triggers": {
        "When_a_row_is_added,_modified_or_deleted": {
          "metadata": {
            "operationMetadataId": "5f7eb43f-c265-4004-b819-5f8317af6f8c"
          },
          "type": "OpenApiConnectionWebhook",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "SubscribeWebhookTrigger",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "subscriptionRequest/message": 4,
              "subscriptionRequest/entityname": "ans_request",
              "subscriptionRequest/scope": 4,
              "subscriptionRequest/filteringattributes": "ans_sendrequest"
            },
            "authentication": "@parameters('$authentication')"
          },
          "conditions": [
            {
              "expression": "@equals(triggerOutputs()?['body/ans_sendrequest'], true)"
            }
          ]
        }
      },
      "actions": {
        "Set_Temperature": {
          "runAfter": {
            "Get_Model": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "edb3833b-5c05-4e26-b469-2da3c2dad550"
          },
          "type": "Compose",
          "inputs": "@coalesce(triggerOutputs()?['body/ans_temperature'],0.7)",
          "description": "Sets temperature to 0.7 if not specified"
        },
        "Collect_Mandatory_Rules": {
          "actions": {
            "List_Mandatory_Rule_Rows": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "befbad17-3c9f-4e78-a802-84a9c30213af"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_commondataserviceforapps",
                  "operationId": "ListRecords",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
                },
                "parameters": {
                  "entityName": "ans_rules",
                  "$select": "ans_ruletext",
                  "fetchXml": "<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"ans_rule\"><attribute name=\"ans_ruleid\"/><order attribute=\"ans_ruleref\" descending=\"false\"/><attribute name=\"ans_ruletext\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"ans_mandatoryrule\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>"
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Select_Rule_Text": {
              "runAfter": {
                "List_Mandatory_Rule_Rows": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "8768892e-9e9c-48ae-ae89-2d7ead36cb1f"
              },
              "type": "Select",
              "inputs": {
                "from": "@outputs('List_Mandatory_Rule_Rows')?['body/value']",
                "select": "@item()?['ans_ruletext']"
              }
            },
            "Join_Rules": {
              "runAfter": {
                "Select_Rule_Text": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "08aeadaa-7404-4371-8ec3-1941d2cd3b1a"
              },
              "type": "Join",
              "inputs": {
                "from": "@body('Select_Rule_Text')",
                "joinWith": "@{item()?['body']},"
              }
            }
          },
          "runAfter": {
            "Set_Temperature": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "8aad4480-0475-4315-b078-3152fb994c90"
          },
          "type": "Scope",
          "description": "Collects Mandatory Rules and concats to a string"
        },
        "Get_Prompt": {
          "runAfter": {},
          "metadata": {
            "operationMetadataId": "d556ce94-4f31-4c31-879e-173ccf6fa80c"
          },
          "type": "OpenApiConnection",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "GetItem",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "entityName": "ans_prompts",
              "recordId": "@triggerOutputs()?['body/_ans_prompt_value']"
            },
            "authentication": "@parameters('$authentication')"
          }
        },
        "Collect_Prompt_Specific_Rules": {
          "actions": {
            "List_Rule_rows_linked_to_Prompt": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "66b5ee04-33a1-454b-933a-4f0cbd8265ec"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_commondataserviceforapps",
                  "operationId": "ListRecords",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
                },
                "parameters": {
                  "entityName": "ans_promptrules",
                  "fetchXml": "<fetch top=\"50\">\n  <entity name=\"ans_promptrule\">\n    <filter>\n      <condition attribute=\"ans_prompt\" operator=\"eq\" value=\"@{triggerOutputs()?['body/_ans_prompt_value']}\" />\n    </filter>\n    <link-entity name=\"ans_rule\" from=\"ans_ruleid\" to=\"ans_rule\" alias=\"rule\">\n      <attribute name=\"ans_ruletext\" />\n    </link-entity>\n  </entity>\n</fetch>"
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Select_Prompt_Specific_Rule_Text": {
              "runAfter": {
                "List_Rule_rows_linked_to_Prompt": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "91f81f18-bc08-4001-a878-fd5239f2c660"
              },
              "type": "Select",
              "inputs": {
                "from": "@outputs('List_Rule_rows_linked_to_Prompt')?['body/value']",
                "select": "@item()?['rule.ans_ruletext']"
              }
            },
            "Join_Prompt_Specific_Rules": {
              "runAfter": {
                "Select_Prompt_Specific_Rule_Text": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "17ab0264-d310-4364-9af5-9b1ce122b6d8"
              },
              "type": "Join",
              "inputs": {
                "from": "@body('Select_Prompt_Specific_Rule_Text')",
                "joinWith": "@{item()?['body']},"
              }
            }
          },
          "runAfter": {
            "Collect_Mandatory_Rules": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "ed327c38-472f-498e-b743-ad7c959d765c"
          },
          "type": "Scope",
          "description": "Collects Prompt Specific Rules and concats to a string"
        },
        "Check_response_for_Mermaid_JS_code": {
          "actions": {
            "Extract_Markdown_Language": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "caa541a8-4855-4d4f-8e58-533f68de3160"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_openaigpt4ip_1",
                  "operationId": "ChatPost",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_openaigpt4ip"
                },
                "parameters": {
                  "body/model": "@outputs('Get_Model')?['body/ans_modelname']",
                  "body/messages": [
                    {
                      "role": "system",
                      "content": "You will be given a block of text by the user, your task is to identify any Mermaid JS markdown code in the response and return it in your response. You will not include any other text in your response.\n\nExample, if you are given this block of text\nI have created an ERD diagram for a parts manufacturer using Dataverse. The schema includes the following tables:\n\n1. Part\n2. Supplier\n3. Customer\n4. Order\n5. OrderItem\n6. Shipment\n\nHere's a brief description of each table:\n\n1. Part: This table stores information about each part manufactured, including the part number, name, description, and cost.\n2. Supplier: This table stores supplier information, including name, address, phone number, and email.\n3. Customer: This table stores customer information, including name, address, phone number, and email.\n4. Order: This table stores order information, including the order number, order date, customer ID (foreign key), and shipment ID (foreign key).\n5. OrderItem: This table stores information about each item in an order, including the order ID (foreign key), part ID (foreign key), quantity, and price.\n6. Shipment: This table stores shipment information, including shipment number, carrier, tracking number, and shipping date.\n\nHere's the Mermaid JS markdown diagram for the ERD:\n\n```\nerDiagram\n  PART ||--|{ ORDERITEM : contains\n  SUPPLIER ||--|{ PART : supplies\n  CUSTOMER ||--|{ ORDER : places\n  ORDER ||--|{ SHIPMENT : has\n  ORDER ||--|{ ORDERITEM : includes\n\n  PART {\n    int partID\n    string partNumber\n    string name\n    string description\n    float cost\n  }\n  SUPPLIER {\n    int supplierID\n    string name\n    string address\n    string phone\n    string email\n  }\n  CUSTOMER {\n    int customerID\n    string name\n    string address\n    string phone\n    string email\n  }\n  ORDER {\n    int orderID\n    datetime orderDate\n    int customerID\n    int shipmentID\n  }\n  ORDERITEM {\n    int orderItemID\n    int orderID\n    int partID\n    int quantity\n    float price\n  }\n  SHIPMENT {\n    int shipmentID\n    string shipmentNumber\n    string carrier\n    string trackingNumber\n    datetime shippingDate\n  }\n```\n\nThis diagram should provide you with a good starting point for a parts manufacturer's database schema using Dataverse. You may need to adjust the tables and relationships to fit your specific requirements.\n\nYou should extract the following:\n\nerDiagram\n  PART ||--|{ ORDERITEM : contains\n  SUPPLIER ||--|{ PART : supplies\n  CUSTOMER ||--|{ ORDER : places\n  ORDER ||--|{ SHIPMENT : has\n  ORDER ||--|{ ORDERITEM : includes\n\n  PART {\n    int partID\n    string partNumber\n    string name\n    string description\n    float cost\n  }\n  SUPPLIER {\n    int supplierID\n    string name\n    string address\n    string phone\n    string email\n  }\n  CUSTOMER {\n    int customerID\n    string name\n    string address\n    string phone\n    string email\n  }\n  ORDER {\n    int orderID\n    datetime orderDate\n    int customerID\n    int shipmentID\n  }\n  ORDERITEM {\n    int orderItemID\n    int orderID\n    int partID\n    int quantity\n    float price\n  }\n  SHIPMENT {\n    int shipmentID\n    string shipmentNumber\n    string carrier\n    string trackingNumber\n    datetime shippingDate\n  }\n\nif you cannot identify any mermaid js code, you will respond with a blank string.\n\nYou must omit any ``` comments in the response."
                    },
                    {
                      "role": "user",
                      "content": "@outputs('Get_chat_completions')?['body/first_content']"
                    }
                  ],
                  "body/temperature": 0
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Markdown": {
              "runAfter": {
                "Extract_Markdown_Language": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "6d671475-14f4-40d0-9c08-bb406613f27f"
              },
              "type": "Compose",
              "inputs": "@outputs('Extract_Markdown_Language')?['body/first_content']"
            }
          },
          "runAfter": {
            "Attempt_Chat_Completion": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "9982dde1-5d13-4ef9-a874-6acbf7c700cb"
          },
          "type": "Scope",
          "description": "Checks for Mermaid JS code in original response and extracts"
        },
        "Get_Model": {
          "runAfter": {
            "Get_Prompt": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "1d246689-2075-40a9-ab95-d5bdda03cc2f"
          },
          "type": "OpenApiConnection",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "GetItem",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "entityName": "ans_models",
              "recordId": "@outputs('Get_Prompt')?['body/_ans_model_value']"
            },
            "authentication": "@parameters('$authentication')"
          }
        },
        "Total_Input_Tokens": {
          "runAfter": {
            "Check_response_for_Mermaid_JS_code": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "52d32061-2117-4619-806e-68f3a7e4f97d"
          },
          "type": "Compose",
          "inputs": "@add(outputs('Extract_Markdown_Language')?['body/usage/prompt_tokens'],outputs('Get_chat_completions')?['body/usage/prompt_tokens'])"
        },
        "Input_Token_Cost": {
          "runAfter": {
            "Total_Input_Tokens": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "f6aa21cd-fcc5-4009-ac4a-49a26b0ff5cf"
          },
          "type": "Compose",
          "inputs": "@mul(outputs('Total_Input_Tokens'),outputs('Get_Model')?['body/ans_inputtokencost'])"
        },
        "Total_Output_Tokens": {
          "runAfter": {
            "Check_response_for_Mermaid_JS_code": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "fedf0620-721f-4454-a3c7-653a2db4c19e"
          },
          "type": "Compose",
          "inputs": "@add(outputs('Extract_Markdown_Language')?['body/usage/completion_tokens'],outputs('Get_chat_completions')?['body/usage/completion_tokens'])"
        },
        "Output_Token_Cost": {
          "runAfter": {
            "Total_Output_Tokens": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "9cf0136d-0117-4018-a796-916ac7b1aa5e"
          },
          "type": "Compose",
          "inputs": "@mul(outputs('Total_Output_Tokens'),outputs('Get_Model')?['body/ans_outputtokencost'])"
        },
        "Update_a_Prompt_row": {
          "runAfter": {
            "Update_a_Request_row": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "c85835f2-2c80-4877-b4e1-799f92cf84eb"
          },
          "type": "OpenApiConnection",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "UpdateRecord",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "entityName": "ans_prompts",
              "recordId": "@outputs('Update_a_Request_row')?['body/_ans_prompt_value']",
              "item/ans_Request@odata.bind": "ans_requests(@{triggerOutputs()?['body/ans_requestid']})"
            },
            "authentication": "@parameters('$authentication')"
          }
        },
        "Update_a_Request_row": {
          "runAfter": {
            "Add_a_new_Response_row": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "833fcf8b-144e-4f78-9f1c-9578584bbb30"
          },
          "type": "OpenApiConnection",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "UpdateRecord",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "entityName": "ans_requests",
              "recordId": "@triggerOutputs()?['body/ans_requestid']",
              "item/ans_Prompt@odata.bind": "ans_prompts(@{outputs('Get_Prompt')?['body/ans_promptid']})",
              "item/ans_requestprocessed": true,
              "item/ans_sendrequest": false,
              "item/ans_temperature": "@outputs('Set_Temperature')"
            },
            "authentication": "@parameters('$authentication')"
          }
        },
        "Add_a_new_Response_row": {
          "runAfter": {
            "Input_Token_Cost": [
              "Succeeded"
            ],
            "Output_Token_Cost": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "964979ad-5c37-4b02-aab9-e156dc745196"
          },
          "type": "OpenApiConnection",
          "inputs": {
            "host": {
              "connectionName": "shared_commondataserviceforapps",
              "operationId": "CreateRecord",
              "apiId": "/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"
            },
            "parameters": {
              "entityName": "ans_responses",
              "item/ans_memaidjscode": "@outputs('Markdown')",
              "item/ans_Prompt@odata.bind": "ans_prompts(@{triggerOutputs()?['body/_ans_prompt_value']})",
              "item/ans_Request@odata.bind": "ans_requests(@{triggerOutputs()?['body/ans_requestid']})",
              "item/ans_responsetext": "@outputs('Get_chat_completions')?['body/first_content']",
              "item/ans_tokencost": "@div(add(outputs('Input_Token_Cost'),outputs('Output_Token_Cost')),1000)",
              "item/ans_totaltokens": "@add(outputs('Total_Output_Tokens'),outputs('Total_Input_Tokens'))"
            },
            "authentication": "@parameters('$authentication')"
          }
        },
        "Attempt_Chat_Completion": {
          "actions": {
            "Get_chat_completions": {
              "runAfter": {
                "Fully_Formed_System_Message": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "cd499338-e68f-4950-a776-7210e3527fe2"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_openaigpt4ip_1",
                  "operationId": "ChatPost",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_openaigpt4ip"
                },
                "parameters": {
                  "body/model": "@outputs('Get_Model')?['body/ans_modelname']",
                  "body/messages": [
                    {
                      "role": "system",
                      "content": "@outputs('Fully_Formed_System_Message')"
                    },
                    {
                      "role": "user",
                      "content": "@triggerOutputs()?['body/ans_requestname']"
                    }
                  ],
                  "body/max_tokens": 4096,
                  "body/temperature": "@outputs('Set_Temperature')",
                  "body/top_p": 0
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Summarise_Rules": {
              "runAfter": {},
              "metadata": {
                "operationMetadataId": "cd499338-e68f-4950-a776-7210e3527fe2"
              },
              "type": "OpenApiConnection",
              "inputs": {
                "host": {
                  "connectionName": "shared_openaigpt4ip_1",
                  "operationId": "ChatPost",
                  "apiId": "/providers/Microsoft.PowerApps/apis/shared_openaigpt4ip"
                },
                "parameters": {
                  "body/model": "gpt-3.5-turbo-0613",
                  "body/messages": [
                    {
                      "role": "system",
                      "content": "You are to summarise rules presented by the user which will be presented to a large language model.\n\nYou will include all rules presented to use in your response\nyour response will consist of a paragraph that outlines what the model can and can't do based on the rules presented by the user\nYour response will only contain the summarisation of the rules, you will not give a greeting or any other dialog. Your response should be within 750 tokens"
                    },
                    {
                      "role": "user",
                      "content": "@{body('Join_Prompt_Specific_Rules')} @{body('Join_Rules')}"
                    }
                  ],
                  "body/max_tokens": 750,
                  "body/temperature": 0.1
                },
                "authentication": "@parameters('$authentication')"
              }
            },
            "Fully_Formed_System_Message": {
              "runAfter": {
                "Summarise_Rules": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "operationMetadataId": "b0252802-39f0-4da4-9f46-ee8740dcc058"
              },
              "type": "Compose",
              "inputs": "Context:\n@{outputs('Get_Prompt')?['body/ans_context']}\n\nPurpose:\n@{outputs('Get_Prompt')?['body/ans_purpose']}\n\nRules:\n @{outputs('Summarise_Rules')?['body/first_content']}"
            }
          },
          "runAfter": {
            "Collect_Prompt_Specific_Rules": [
              "Succeeded"
            ]
          },
          "metadata": {
            "operationMetadataId": "619d233e-852c-49b2-aaa9-3b350434ed27"
          },
          "type": "Scope",
          "description": "Calls openAI Service to get chat completion"
        },
        "Terminate_when_Chat_Completion_Fails": {
          "runAfter": {
            "Attempt_Chat_Completion": [
              "Failed",
              "Skipped",
              "TimedOut"
            ]
          },
          "metadata": {
            "operationMetadataId": "7732b878-4830-4cea-8f6b-429f574c8a1c"
          },
          "type": "Terminate",
          "inputs": {
            "runStatus": "Failed",
            "runError": {
              "code": "500",
              "message": "Internal Server Error"
            }
          }
        },
        "Terminate_when_Markdown_Prompt_Fails": {
          "runAfter": {
            "Check_response_for_Mermaid_JS_code": [
              "Failed",
              "Skipped",
              "TimedOut"
            ]
          },
          "metadata": {
            "operationMetadataId": "726af043-9b0d-4051-862c-84e133ee6ae2"
          },
          "type": "Terminate",
          "inputs": {
            "runStatus": "Failed",
            "runError": {
              "code": "500",
              "message": "Internal Server Error"
            }
          }
        }
      }
    },
    "templateName": ""
  },
  "schemaVersion": "1.0.0.0"
}